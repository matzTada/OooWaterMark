#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('watermarkgui:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* 
 added by TadaMatz
 websocket things. see https://team-lab.github.io/skillup-nodejs/3/1.html
*/

var fs = require('fs'); //added by TadaMatz file handling
var dateUtils = require('date-utils'); //added by TadaMatz file handling

//initialize
var JSON_FILE_DIR = process.env.JSON_FILE_DIR;
// var JSON_FILE_DIR = path.join(__dirname, '/public', '/jsons');

var io = require('socket.io').listen(server);

// io.sockets.on('connection', function(socket) {
//   //check connection id
//   console.log('connected', socket.id);

//   // echo back contents to all clientes when receive event calle "chat"
//   socket.on('chat', function(chat) {
//     console.log('message : ' + chat.message);
//     io.emit('chat', chat);
//   });

//   // when connection is broken
//   socket.on('disconnect', function() {
//     console.log('disconnect');
//   });
// });

setInterval(function() {
  var chat = {
    name: "perman",
    message: "period"
  };
  console.log('send periodical message: ' + chat);
  io.emit('chat', chat);
}, 1000);

//file handling functions
function fileCheck(filePath) {
  var isExist = false;
  try {
    fs.statSync(filePath, { encoding: 'utf8' });
    console.log(true);
    return true;
  } catch (err) {
    console.log(false);
    return false;
  }
  return isExist;
}

function fileRead(filePath) {
  var content = new String();
  if (fileCheck(filePath)) {;
    content = fs.readFileSync(filePath, { encoding: 'utf8' });
    console.log('finish read file');
  }
  return content;
};

function fileWrite(filePath, stream) {
  var result = false;
  try {
    fs.writeFileSync(filePath, stream);
    return true;
  } catch (err) {
    return false;
  }
}